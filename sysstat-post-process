#!/usr/bin/perl
## -*- mode: perl; indent-tabs-mode: t; perl-indent-level: 4 -*-
## vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=perl

use strict;
use warnings;
use JSON::XS;
use JSON::Validator;
use Data::Dumper;

BEGIN {
    if (!(exists $ENV{'TOOLBOX_HOME'} && -d "$ENV{'TOOLBOX_HOME'}/perl")) {
	print "This script requires libraries that are provided by the toolbox project.\n";
	print "Toolbox can be acquired from https://github.com/perftool-incubator/toolbox and\n";
	print "then use 'export TOOLBOX_HOME=/path/to/toolbox' so that it can be located.\n";
	exit 1;
    }
}
use lib "$ENV{'TOOLBOX_HOME'}/perl";
use toolbox::json;

sub build_netdev_types {
    my %netdev_types;
    my $netdev_types_file = "netdev-types.txt";
    if (-f $netdev_types_file) {
	my $fh = new IO::Uncompress::UnXz $netdev_types_file, Transparent => 1 || die "Could not open $netdev_types_file";
        while ( my $line = <$fh>) {
            chomp $line;
            if ($line =~ /^(\S+)\s+\.\.\/\.\.\/devices\/(\S+)$/) {
                $netdev_types{$1} = $2;
            }
        }
        close($fh);
   }
   return \%netdev_types;
}

sub get_netdev_type {
    my $netdev_name = shift;
    my $netdev_types_ref = shift;
    if (exists $$netdev_types_ref{$netdev_name}) {
        if ($$netdev_types_ref{$netdev_name} =~ /^pci/) {
            return "physical";
        } elsif ($$netdev_types_ref{$netdev_name} =~ /^virtual/) {
            return "virtual";
        } else {
            return "unknown";
        }
    }
    return "unknown";
}

sub build_cpu_topology {
    my @cpu_topo;
    my $cpu_topo_path = "sys/devices/system/cpu";
    if (-d $cpu_topo_path) {
        opendir(my $dh, $cpu_topo_path);
        for my $cpu_dir (grep(/^cpu\d+/, sort readdir($dh))) {
            my $cpu_id = $cpu_dir;
            $cpu_id =~ s/^cpu//;
            chomp $cpu_id;
            my $this_cpu_topo_path = $cpu_topo_path . "/" . $cpu_dir . "/topology";
            if (-d $this_cpu_topo_path) {
                my %topo;
                my $file;
                for my $this_cpu_type ('physical_package_id', 'die_id', 'core_id') {
                    $file = $this_cpu_topo_path . "/" . $this_cpu_type;
                    if (-e $file) {
                        open(FH, $file) or die "Could not open $file";
                        my $id = <FH>;
                        close FH;
                        chomp $id;
                        if ($id =~ /^\d+$/) {
                            if ($this_cpu_type eq "physical_package_id") {
                                # Keep the naming consistent, $single_word_heirarchy_level . "_id"
                                $topo{'package_id'} = $id;
                            } else {
                                $topo{$this_cpu_type} = $id;
                            }
                        } else {
                            die "CPU ID for %s is not a valid number\n". $file;
                        }
                    } else {
                        printf "WARNING: could not find %s\n", $file;
                    }
                }
                # Getting a cpu-thread ID is not as straight forward as it is for package, die,
                # and core.  Sysfs does not provide an actual thread id.  We must what position
                # in the list of thread_siblings our [logical] cpu id is and use that position
                # as the thread id.
                $file = $cpu_topo_path . "/" . $cpu_dir . "/topology/thread_siblings_list";
                if (-e $file) {
                    open(FH, $file);
                    my $list = <FH>;
                    chomp $list;
                    close FH;
                    my $thread_id = 0;
                    # We need an ordered list with no x-y ranges in it
                    for my $range (split(/,/, $list)) {
                        if ($range =~ /(\d+)-(\d+)/) {
                            my $i;
                            for ($i = $1; $i <= $2; $i++) {
                                if ($i == $cpu_id) {
                                    $topo{'thread_id'} = $thread_id;
                                    last;
                                }
                                $thread_id++;
                            }
                        } else {
                            if ($range == $cpu_id) {
                                $topo{'thread_id'} = $thread_id;
                                last;
                            }
                            $thread_id++;
                        }
                    }
                } else {
                    printf "WARNING: could not find %s\n", $file;
                }
                $cpu_topo[$cpu_id] = \%topo;
            } else {
                printf "WARNING: could not find %s\n", $this_cpu_topo_path;
            }
        }
    } else {
        printf "WARNING: could not find %s\n", $cpu_topo_path;
    }
    return \@cpu_topo;
}

sub get_cpu_topology {
    my $cpu_num = shift;
    my $cpus_ref = shift;
    if (exists $$cpus_ref[$cpu_num]) {
        return ($$cpus_ref[$cpu_num]{'package_id'}, $$cpus_ref[$cpu_num]{'die_id'}, $$cpus_ref[$cpu_num]{'core_id'}, $$cpus_ref[$cpu_num]{'thread_id'});
    } else {
        return (0, 0, $cpu_num, 0);
    }
}

sub get_hms_ms {
    my $hour = shift;
    my $min = shift;
    my $sec = shift;

    return (1000 * ($hour * 60 * 60 + $min * 60 + $sec));
}

sub advance_ymd {
    my $ymd_timestamp_ms = shift;

    return ($ymd_timestamp_ms + (1000 * 60 * 60 * 24));
}

my @cpu_topology; # store a hash containing package, die, core, and thread ID per element, CPU ID = index
my @sysstat_metrics;
my %metric_types;
opendir(my $dh, ".");
for my $log_file (sort readdir($dh)) {
    if (($log_file =~ /^sar-stdout.txt$/) ||
	($log_file =~ /^sar-stdout.txt.xz$/)) {
        my $netdev_types_ref =  build_netdev_types;
        my $ymd_timestamp_ms; # Epochtime in milliseconds
        my $scan_mode = "";
        my $hms_ms; # Number of milliseconds for only today's hour-minute-seconds (NOT since epoch, since 12:00 AM)
        my $prev_hms_ms;
	my $log_fh = new IO::Uncompress::UnXz $log_file, Transparent => 1 || die "[ERROR]could not open file " . $log_file;

        while (<$log_fh>) {
            chomp;

            if ($scan_mode eq '') {
                if (/^Linux\s\S+\s\S+\s+(\d+-\d+-\d+)\s+\S+\s+\S+/) {
                    #Linux 4.18.0-147.8.1.el8_1.x86_64 (worker000) 	2020-06-24 	_x86_64_	(64 CPU)
                    my $ymd = $1;
                    $ymd_timestamp_ms = `date +%s%N -d $ymd -u` / 1000000;
                } elsif ( /(\d+:\d+:\d+)\s+IFACE\s+rxpck\/s\s+txpck\/s\s+rxkB\/s\s+txkB\/s\s+rxcmp\/s\s+txcmp\/s\s+rxmcst\/s\s+%ifutil$/ ) {
                    #22:28:54        IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil
                    $scan_mode = "net";
                } elsif ( /(\d+:\d+:\d+)\s+proc\/s\s+cswch\/s$/ ) {
                    #15:41:30       proc/s   cswch/s
                    $scan_mode = "task";
                } elsif ( /(\d+:\d+:\d+)\s+%scpu-10\s+%scpu-60\s+%scpu-300\s+%scpu$/ ) {
                    #15:20:52     %scpu-10  %scpu-60 %scpu-300     %scpu
                    $scan_mode = "cpu-starved";
                } elsif ( /(\d+:\d+:\d+)\s+%sio-10\s+%sio-60\s+%sio-300\s+%sio\s+%fio-10\s+%fio-60\s+%fio-300\s+%fio$/ ) {
                    #16:19:33      %sio-10   %sio-60  %sio-300      %sio   %fio-10   %fio-60  %fio-300      %fio
                    $scan_mode = "io-starved";
                } elsif ( /(\d+:\d+:\d+)\s+runq-sz\s+plist-sz\s+ldavg-1\s+ldavg-5\s+ldavg-15\s+blocked$/ ) {
                    #16:19:36      runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15   blocked
                    $scan_mode = "task-lists";
                } elsif ( /(\d+:\d+:\d+)\s+%smem-10\s+%smem-60\s+%smem-300\s+%smem\s+%fmem-10\s+%fmem-60\s+%fmem-300\s+%fmem$/ ) {
                    #16:19:33     %smem-10  %smem-60 %smem-300     %smem  %fmem-10  %fmem-60 %fmem-300     %fmem
                    $scan_mode = "memory-starved";
                } elsif ( /(\d+:\d+:\d+)\s+pswpin\/s\s+pswpout\/s$/ ) {
                    #16:19:36     pswpin/s pswpout/s
                    $scan_mode = "swapping";
                } elsif ( /(\d+:\d+:\d+)\s+pgpgin\/s\s+pgpgout\/s\s+fault\/s\s+majflt\/s\s+pgfree\/s\s+pgscank\/s\s+pgscand\/s\s+pgsteal\/s\s+%vmeff$/ ) {
                    #21:26:11     pgpgin/s pgpgout/s   fault/s  majflt/s  pgfree/s pgscank/s pgscand/s pgsteal/s    %vmeff
                    $scan_mode = "paging";
                }
            } else {
                if ($scan_mode eq "paging") {
                    if ( /(\d+):(\d+):(\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)$/ ) {
                        #21:26:14         0.00    385.67  15381.00      0.00   9596.00      0.00      0.00      0.00      0.00
                        my $hour = $1;
                        my $min = $2;
                        my $sec = $3;
                        my $kb_paged_in = $4;
                        my $kb_paged_out = $5;
                        my %faults;
                        $faults{'minor'} = $6 - $7;
                        $faults{'major'} = $7;
                        my $freed_pages = $8;
                        my $kswapd_scanned_pages = $9;
                        my $scanned_pages = $10;
                        my $reclaimed_pages = $11;
                        my $vm_efficiency = $12;

                        $hms_ms = get_hms_ms($hour, $min, $sec);
                        if (defined $prev_hms_ms and $prev_hms_ms > $hms_ms) {
                            # hour-minute-second is lower than last reading so one day has passed
                            $ymd_timestamp_ms = advance_ymd($ymd_timestamp_ms);
                        }

                        my $this_type = "KB-Paged-in-sec";
                        if (! exists $metric_types{$this_type}) {
                            $metric_types{$this_type} = scalar @sysstat_metrics;
                            my %this_metric;
                            my %desc = ('class' => 'throughput', 'source' => 'sar-mem',
                                        'type' => $this_type);
                            $this_metric{'desc'} = \%desc;
                            push(@sysstat_metrics, \%this_metric);
                        }
                        my %kbpi_sample = ( 'value' => $kb_paged_in, 'end' => $hms_ms + $ymd_timestamp_ms );
                        push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%kbpi_sample);

                        $this_type = "KB-Paged-out-sec";
                        if (! exists $metric_types{$this_type}) {
                            $metric_types{$this_type} = scalar @sysstat_metrics;
                            my %this_metric;
                            my %desc = ('class' => 'throughput', 'source' => 'sar-mem',
                                        'type' => $this_type);
                            $this_metric{'desc'} = \%desc;
                            push(@sysstat_metrics, \%this_metric);
                        }
                        my %kbpo_sample = ( 'value' => $kb_paged_out, 'end' => $hms_ms + $ymd_timestamp_ms );
                        push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%kbpo_sample);

                        for my $fault_type (keys %faults) {
                            $this_type = 'Page-faults-sec';
                            if (! exists $metric_types{$this_type}{$fault_type}) {
                                $metric_types{$this_type}{$fault_type} = scalar @sysstat_metrics;
                                my %this_metric;
                                my %desc = ('class' => 'throughput', 'source' => 'sar-mem',
                                            'type' => $this_type);
                                my %names = ('type' => $fault_type);
                                $this_metric{'desc'} = \%desc;
                                $this_metric{'names'} = \%names;
                                push(@sysstat_metrics, \%this_metric);
                            }
                            my %this_sample = ( 'value' => $faults{$fault_type}, 'end' => $hms_ms + $ymd_timestamp_ms);
                            push(@{ $sysstat_metrics[$metric_types{$this_type}{$fault_type}]{'data'}}, \%this_sample);
                        }

                        $this_type = "Pages-freed-sec";
                        if (! exists $metric_types{$this_type}) {
                            $metric_types{$this_type} = scalar @sysstat_metrics;
                            my %this_metric;
                            my %desc = ('class' => 'throughput', 'source' => 'sar-mem',
                                        'type' => $this_type);
                            $this_metric{'desc'} = \%desc;
                            push(@sysstat_metrics, \%this_metric);
                        }
                        my %fp_sample = ( 'value' => $freed_pages, 'end' => $hms_ms + $ymd_timestamp_ms );
                        push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%fp_sample);

                        $this_type = "kswapd-scanned-pages-sec";
                        if (! exists $metric_types{$this_type}) {
                            $metric_types{$this_type} = scalar @sysstat_metrics;
                            my %this_metric;
                            my %desc = ('class' => 'throughput', 'source' => 'sar-mem',
                                        'type' => $this_type);
                            $this_metric{'desc'} = \%desc;
                            push(@sysstat_metrics, \%this_metric);
                        }
                        my %ksp_sample = ( 'value' => $kswapd_scanned_pages, 'end' => $hms_ms + $ymd_timestamp_ms );
                        push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%ksp_sample);

                        $this_type = "scanned-pages-sec";
                        if (! exists $metric_types{$this_type}) {
                            $metric_types{$this_type} = scalar @sysstat_metrics;
                            my %this_metric;
                            my %desc = ('class' => 'throughput', 'source' => 'sar-mem',
                                        'type' => $this_type);
                            $this_metric{'desc'} = \%desc;
                            push(@sysstat_metrics, \%this_metric);
                        }
                        my %sp_sample = ( 'value' => $scanned_pages, 'end' => $hms_ms + $ymd_timestamp_ms );
                        push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%sp_sample);

                        $this_type = "reclaimed-pages-sec";
                        if (! exists $metric_types{$this_type}) {
                            $metric_types{$this_type} = scalar @sysstat_metrics;
                            my %this_metric;
                            my %desc = ('class' => 'throughput', 'source' => 'sar-mem',
                                        'type' => $this_type);
                            $this_metric{'desc'} = \%desc;
                            push(@sysstat_metrics, \%this_metric);
                        }
                        my %rp_sample = ( 'value' => $reclaimed_pages, 'end' => $hms_ms + $ymd_timestamp_ms );
                        push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%rp_sample);

                        $this_type = "VM-Efficiency";
                        if (! exists $metric_types{$this_type}) {
                            $metric_types{$this_type} = scalar @sysstat_metrics;
                            my %this_metric;
                            my %desc = ('class' => 'throughput', 'source' => 'sar-mem',
                                        'type' => $this_type);
                            $this_metric{'desc'} = \%desc;
                            push(@sysstat_metrics, \%this_metric);
                        }
                        my %vme_sample = ( 'value' => $vm_efficiency, 'end' => $hms_ms + $ymd_timestamp_ms );
                        push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%vme_sample);
                    } elsif ($_ eq '') {
                        $scan_mode = '';
                    }
                } elsif ($scan_mode eq "swapping") {
                    if ( /(\d+):(\d+):(\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)$/ ) {
                        #16:19:39         0.00      0.00
                        my $hour = $1;
                        my $min = $2;
                        my $sec = $3;
                        my $pages_in = $4;
                        my $pages_out = $5;

                        $hms_ms = get_hms_ms($hour, $min, $sec);
                        if (defined $prev_hms_ms and $prev_hms_ms > $hms_ms) {
                            # hour-minute-second is lower than last reading so one day has passed
                            $ymd_timestamp_ms = advance_ymd($ymd_timestamp_ms);
                        }

                        my $this_type = "Pages-swapped-in-sec";
                        if (! exists $metric_types{$this_type}) {
                            $metric_types{$this_type} = scalar @sysstat_metrics;
                            my %this_metric;
                            my %desc = ('class' => 'throughput', 'source' => 'sar-mem',
                                        'type' => $this_type);
                            $this_metric{'desc'} = \%desc;
                            push(@sysstat_metrics, \%this_metric);
                        }
                        my %psi_sample = ( 'value' => $pages_in, 'end' => $hms_ms + $ymd_timestamp_ms );
                        push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%psi_sample);

                        $this_type = "Pages-swapped-out-sec";
                        if (! exists $metric_types{$this_type}) {
                            $metric_types{$this_type} = scalar @sysstat_metrics;
                            my %this_metric;
                            my %desc = ('class' => 'throughput', 'source' => 'sar-mem',
                                        'type' => $this_type);
                            $this_metric{'desc'} = \%desc;
                            push(@sysstat_metrics, \%this_metric);
                        }
                        my %pso_sample = ( 'value' => $pages_out, 'end' => $hms_ms + $ymd_timestamp_ms );
                        push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%pso_sample);
                    } elsif ($_ eq '') {
                        $scan_mode = '';
                    }
                } elsif ($scan_mode eq "memory-starved") {
                    if ( /(\d+):(\d+):(\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)$/ ) {
                        #16:19:36         0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00
                        my $hour = $1;
                        my $min = $2;
                        my $sec = $3;
                        my %memory_waiting;
                        $memory_waiting{'010s'} = $4;
                        $memory_waiting{'060s'} = $5;
                        $memory_waiting{'300s'} = $6;
                        $memory_waiting{'last_interval'} = $7;
                        my %memory_stalled;
                        $memory_stalled{'010s'} = $8;
                        $memory_stalled{'060s'} = $9;
                        $memory_stalled{'300s'} = $10;
                        $memory_stalled{'last_interval'} = $11;

                        $hms_ms = get_hms_ms($hour, $min, $sec);
                        if (defined $prev_hms_ms and $prev_hms_ms > $hms_ms) {
                            # hour-minute-second is lower than last reading so one day has passed
                            $ymd_timestamp_ms = advance_ymd($ymd_timestamp_ms);
                        }

                        for my $time_window (keys %memory_waiting) {
                            my $this_type = "%-Time-Tasks-Waiting-on-Memory-" . $time_window;
                            if (! exists $metric_types{$this_type}) {
                                $metric_types{$this_type} = scalar @sysstat_metrics;
                                my %this_metric;
                                my %desc = ('class' => 'throughput', 'source' => 'sar-mem',
                                            'type' => $this_type);
                                $this_metric{'desc'} = \%desc;
                                push(@sysstat_metrics, \%this_metric);
                            }
                            my %this_sample = ( 'value' => $memory_waiting{$time_window}, 'end' => $hms_ms + $ymd_timestamp_ms );
                            push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%this_sample);
                        }

                        for my $time_window (keys %memory_stalled) {
                            my $this_type = "%-Time-Non-Idle-Tasks-Stalled-on-Memory-" . $time_window;
                            if (! exists $metric_types{$this_type}) {
                                $metric_types{$this_type} = scalar @sysstat_metrics;
                                my %this_metric;
                                my %desc = ('class' => 'throughput', 'source' => 'sar-mem',
                                            'type' => $this_type);
                                $this_metric{'desc'} = \%desc;
                                push(@sysstat_metrics, \%this_metric);
                            }
                            my %this_sample = ( 'value' => $memory_stalled{$time_window}, 'end' => $hms_ms + $ymd_timestamp_ms );
                            push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%this_sample);
                        }
                    } elsif ($_ eq '') {
                        $scan_mode = '';
                    }
                } elsif ($scan_mode eq "task-lists") {
                    if ( /(\d+):(\d+):(\d+)\s+(\d+)\s+(\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+)$/ ) {
                        #16:19:39            1       551      0.50      0.13      0.04         0
                        my $hour = $1;
                        my $min = $2;
                        my $sec = $3;
                        my $run_queue_length = $4;
                        my $process_list_size = $5;
                        my %load_average;
                        $load_average{'01m'} = $6;
                        $load_average{'05m'} = $7;
                        $load_average{'15m'} = $8;
                        my $io_blocked_tasks = $9;

                        $hms_ms = get_hms_ms($hour, $min, $sec);
                        if (defined $prev_hms_ms and $prev_hms_ms > $hms_ms) {
                            # hour-minute-second is lower than last reading so one day has passed
                            $ymd_timestamp_ms = advance_ymd($ymd_timestamp_ms);
                        }

                        my $this_type = "Run-Queue-Length";
                        if (! exists $metric_types{$this_type}) {
                            $metric_types{$this_type} = scalar @sysstat_metrics;
                            my %this_metric;
                            my %desc = ('class' => 'count', 'source' => 'sar-scheduler',
                                        'type' => $this_type);
                            $this_metric{'desc'} = \%desc;
                            push(@sysstat_metrics, \%this_metric);
                        }
                        my %rql_sample = ( 'value' => $run_queue_length, 'end' => $hms_ms + $ymd_timestamp_ms );
                        push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%rql_sample);

                        $this_type = "Process-List-Size";
                        if (! exists $metric_types{$this_type}) {
                            $metric_types{$this_type} = scalar @sysstat_metrics;
                            my %this_metric;
                            my %desc = ('class' => 'count', 'source' => 'sar-scheduler',
                                        'type' => $this_type);
                            $this_metric{'desc'} = \%desc;
                            push(@sysstat_metrics, \%this_metric);
                        }
                        my %pls_sample = ( 'value' => $process_list_size, 'end' => $hms_ms + $ymd_timestamp_ms );
                        push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%pls_sample);

                        for my $time_window (keys %load_average) {
                            $this_type = "Load-Average-" . $time_window;
                            if (! exists $metric_types{$this_type}) {
                                $metric_types{$this_type} = scalar @sysstat_metrics;
                                my %this_metric;
                                my %desc = ('class' => 'count', 'source' => 'sar-scheduler',
                                            'type' => $this_type);
                                $this_metric{'desc'} = \%desc;
                                push(@sysstat_metrics, \%this_metric);
                            }
                            my %this_sample = ( 'value' => $load_average{$time_window}, 'end' => $hms_ms + $ymd_timestamp_ms );
                            push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%this_sample);
                        }

                        $this_type = "IO-Blocked-Tasks";
                        if (! exists $metric_types{$this_type}) {
                            $metric_types{$this_type} = scalar @sysstat_metrics;
                            my %this_metric;
                            my %desc = ('class' => 'count', 'source' => 'sar-io',
                                        'type' => $this_type);
                            $this_metric{'desc'} = \%desc;
                            push(@sysstat_metrics, \%this_metric);
                        }
                        my %ibt_sample = ( 'value' => $io_blocked_tasks, 'end' => $hms_ms + $ymd_timestamp_ms );
                        push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%ibt_sample);
                    } elsif ($_ eq '') {
                        $scan_mode = '';
                    }
                } elsif ($scan_mode eq "io-starved") {
                    if ( /(\d+):(\d+):(\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)$/ ) {
                        #16:19:36         0.13      0.17      0.04      0.01      0.10      0.12      0.03      0.00
                        my $hour = $1;
                        my $min = $2;
                        my $sec = $3;
                        my %io_time_lost;
                        $io_time_lost{'010s'} = $4;
                        $io_time_lost{'060s'} = $5;
                        $io_time_lost{'300s'} = $6;
                        $io_time_lost{'last_interval'} = $7;
                        my %io_time_stalled;
                        $io_time_stalled{'010s'} = $8;
                        $io_time_stalled{'060s'} = $9;
                        $io_time_stalled{'300s'} = $10;
                        $io_time_stalled{'last_interval'} = $11;

                        $hms_ms = get_hms_ms($hour, $min, $sec);
                        if (defined $prev_hms_ms and $prev_hms_ms > $hms_ms) {
                            # hour-minute-second is lower than last reading so one day has passed
                            $ymd_timestamp_ms = advance_ymd($ymd_timestamp_ms);
                        }

                        for my $time_window (keys %io_time_lost) {
                            my $this_type = "%-Time-Tasks-Lost-Waiting-on-IO-" . $time_window;
                            if (! exists $metric_types{$this_type}) {
                                $metric_types{$this_type} = scalar @sysstat_metrics;
                                my %this_metric;
                                my %desc = ('class' => 'throughput', 'source' => 'sar-io',
                                            'type' => $this_type);
                                $this_metric{'desc'} = \%desc;
                                push(@sysstat_metrics, \%this_metric);
                            }
                            my %this_sample = ( 'value' => $io_time_lost{$time_window}, 'end' => $hms_ms + $ymd_timestamp_ms );
                            push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%this_sample);
                        }

                        for my $time_window (keys %io_time_stalled) {
                            my $this_type = "%-Time-Tasks-Stalled-Waiting-on-IO-" . $time_window;
                            if (! exists $metric_types{$this_type}) {
                                $metric_types{$this_type} = scalar @sysstat_metrics;
                                my %this_metric;
                                my %desc = ('class' => 'throughput', 'source' => 'sar-io',
                                            'type' => $this_type);
                                $this_metric{'desc'} = \%desc;
                                push(@sysstat_metrics, \%this_metric);
                            }
                            my %this_sample = ( 'value' => $io_time_stalled{$time_window}, 'end' => $hms_ms + $ymd_timestamp_ms );
                            push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%this_sample);
                        }
                    } elsif ($_ eq '') {
                        $scan_mode = '';
                    }
                } elsif ($scan_mode eq "cpu-starved") {
                    if ( /(\d+):(\d+):(\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)$/ ) {
                        #15:20:55         7.12      2.37      2.33      5.14
                        my $hour = $1;
                        my $min = $2;
                        my $sec = $3;
                        my %cpu_starved;
                        $cpu_starved{'010s'} = $4;
                        $cpu_starved{'060s'} = $5;
                        $cpu_starved{'300s'} = $6;
                        $cpu_starved{'last_interval'} = $7;

                        $hms_ms = get_hms_ms($hour, $min, $sec);
                        if (defined $prev_hms_ms and $prev_hms_ms > $hms_ms) {
                            # hour-minute-second is lower than last reading so one day has passed
                            $ymd_timestamp_ms = advance_ymd($ymd_timestamp_ms);
                        }

                        for my $time_window (keys %cpu_starved) {
                            my $this_type = "%-Time-Tasks-CPU-Starved-" . $time_window;
                            if (! exists $metric_types{$this_type}) {
                                $metric_types{$this_type} = scalar @sysstat_metrics;
                                my %this_metric;
                                my %desc = ('class' => 'throughput', 'source' => 'sar-scheduler',
                                            'type' => $this_type);
                                $this_metric{'desc'} = \%desc;
                                push(@sysstat_metrics, \%this_metric);
                            }
                            my %this_sample = ( 'value' => $cpu_starved{$time_window}, 'end' => $hms_ms + $ymd_timestamp_ms );
                            push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%this_sample);
                        }
                        $prev_hms_ms = $hms_ms;
                    } elsif ($_ eq '') {
                        $scan_mode = '';
                    }
                } elsif ($scan_mode eq "task") {
                    if ( /(\d+):(\d+):(\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)$/ ) {
                        #15:41:33       137.67   2529.67
                        my $hour = $1;
                        my $min = $2;
                        my $sec = $3;
                        my $processes_created = $4;
                        my $context_switches = $5;

                        $hms_ms = get_hms_ms($hour, $min, $sec);
                        if (defined $prev_hms_ms and $prev_hms_ms > $hms_ms) {
                            # hour-minute-second is lower than last reading so one day has passed
                            $ymd_timestamp_ms = advance_ymd($ymd_timestamp_ms);
                        }

                        my $this_type = "Processes-created-sec";
                        if (! exists $metric_types{$this_type}) {
                            $metric_types{$this_type} = scalar @sysstat_metrics;
                            my %this_metric;
                            my %desc = ('class' => 'throughput', 'source' => 'sar-tasks',
                                        'type' => $this_type);
                            $this_metric{'desc'} = \%desc;
                            push(@sysstat_metrics, \%this_metric);
                        }
                        my %pc_sample = ( 'value' => $processes_created, 'end' => $hms_ms + $ymd_timestamp_ms );
                        push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%pc_sample);

                        $this_type = "Context-switches-sec";
                        if (! exists $metric_types{$this_type}) {
                            $metric_types{$this_type} = scalar @sysstat_metrics;
                            my %this_metric;
                            my %desc = ('class' => 'throughput', 'source' => 'sar-scheduler',
                                        'type' => $this_type);
                            $this_metric{'desc'} = \%desc;
                            push(@sysstat_metrics, \%this_metric);
                        }
                        my %cs_sample = ( 'value' => $context_switches, 'end' => $hms_ms + $ymd_timestamp_ms );
                        push(@{ $sysstat_metrics[$metric_types{$this_type}]{'data'}}, \%cs_sample);

                        $prev_hms_ms = $hms_ms;
                    } elsif ($_ eq '') {
                        $scan_mode = '';
                    }
                } elsif ($scan_mode eq "net") {
                    if (/(\d+):(\d+):(\d+)\s+(\S+)\s+(\d+\.\d+)\s+(\d+\.\d+\d+)\s+(\d+\.\d+)\s+(\d+\.\d+\d+)/) {
                        #22:28:57         eth1      0.00      4.33      0.00      0.40      0.00      0.00      0.00      0.00
                        my $hour = $1;
                        my $min = $2;
                        my $sec = $3;
                        my $dev = $4;
                        my $rxpack = $5;
                        my $txpack = $6;
                        my $rxkB = $7;
                        my $txkB = $8;
                        $hms_ms = get_hms_ms($hour, $min, $sec);
                        if (defined $prev_hms_ms and $prev_hms_ms > $hms_ms) {
                            # hour-minute-second is lower than last reading so one day has passed
                            $ymd_timestamp_ms = advance_ymd($ymd_timestamp_ms);
                        }
                        for my $direction ('rx', 'tx') {
                            my $this_type = 'L2-Gbps';
                            my $this_name = $dev . '-' . $direction;
                            if (! exists $metric_types{$this_type}{$this_name}) {
                                # Once defined use this to remeber which index it uses in the @sysstat_metrics array.
                                $metric_types{$this_type}{$this_name} = scalar @sysstat_metrics;
                                my %this_metric;
                                my %desc = ('class' => 'throughput', 'source' => 'sar-net',
                                            'type' => $this_type);
                                my %names = ('dev' => $dev, 'direction' => $direction, 'type' => get_netdev_type($dev, $netdev_types_ref));
                                $this_metric{'desc'} = \%desc;
                                $this_metric{'names'} = \%names;
                                push(@sysstat_metrics, \%this_metric);
                            }
                            my $value;
                            if ($direction eq 'rx') {
                                $value = $rxkB / 1000000 * 8;
                            } else {
                                $value = $txkB / 1000000 * 8;
                            }
                            my %this_sample = ( 'value' => $value, 'end' => $hms_ms + $ymd_timestamp_ms);
                            push(@{ $sysstat_metrics[$metric_types{$this_type}{$this_name}]{'data'}}, \%this_sample);
                        }
                        $prev_hms_ms = $hms_ms;
                    } elsif ($_ eq '') {
                        $scan_mode = '';
                    }
                }
            }
        }
        close($log_fh);
    } elsif (($log_file =~ /^mpstat.json$/) ||
	     ($log_file =~ /^mpstat.json.xz$/)) {
        my $cpu_topo_ref = build_cpu_topology;
        my $json_ref = get_json_file($log_file);
        my %mpstat = %$json_ref;
        my $ymd_timestamp_ms; # Epochtime in milliseconds
        if (exists $mpstat{'sysstat'} and exists $mpstat{'sysstat'}{'hosts'} and exists $mpstat{'sysstat'}{'hosts'}[0]) {
            if (exists $mpstat{'sysstat'}{'hosts'}[0]{'date'}) {
                $ymd_timestamp_ms = `date +%s%N -d $mpstat{'sysstat'}{'hosts'}[0]{'date'} -u` / 1000000;
                if (exists $mpstat{'sysstat'}{'hosts'}[0]{'statistics'}) {
                    my $hms_ms;
                    my $prev_hms_ms;
                    for my $stat (@{ $mpstat{'sysstat'}{'hosts'}[0]{'statistics'} }) {
                        my $timestamp = $$stat{'timestamp'};
                        if ($timestamp =~ /(\d+):(\d+):(\d+)/) {
                            my $hour = $1;
                            my $min = $2;
                            my $sec = $3;
                            $hms_ms = get_hms_ms($hour, $min, $sec);
                            if (defined $prev_hms_ms and $prev_hms_ms > $hms_ms) {
                                # hour-minute-second is lower than last reading so one day has passed
                                $ymd_timestamp_ms = advance_ymd($ymd_timestamp_ms);
                            }
                            for my $cpu_entry (@{ $$stat{'cpu-load'} }) {
                                if ($$cpu_entry{'cpu'} eq "all") {
                                    next;
                                }
                                (my $package, my $die, my $core, my $thread) = get_cpu_topology($$cpu_entry{'cpu'}, $cpu_topo_ref);
                                for my $cpu_type (grep(!/^cpu?/, (keys %{ $cpu_entry }))) {
                                    my $this_type;
                                    if ($cpu_type eq "idle" or $cpu_type eq "iowait" or $cpu_type eq "steal") {
                                        $this_type = 'NonBusy-CPU';
                                    } else {
                                        $this_type = 'Busy-CPU';
                                    }
                                    my $this_name = $package . '-' . $die . '-' . $core . '-' . $thread . '-' . $$cpu_entry{'cpu'} . '-' . $cpu_type;
                                    if (! exists $metric_types{$this_type}{$this_name}) {
                                        # Once defined use this to remeber which index it uses in the @sysstat_metrics array.
                                        # We need this index later to include the metric_data
                                        $metric_types{$this_type}{$this_name} = scalar @sysstat_metrics;
                                        my %this_metric;
                                        my %desc = ('class' => 'throughput', 'source' => 'mpstat',
                                                    'type' => $this_type);
                                        my %names = ('package' => $package, 'die' => $die, 'core' => $core, 'thread' => $thread, 'num' => $$cpu_entry{'cpu'}, 'type' => $cpu_type);
                                        $this_metric{'desc'} = \%desc;
                                        $this_metric{'names'} = \%names;
                                        push(@sysstat_metrics, \%this_metric);
                                    }
                                    # Convert CPU percent so "whole" CPU units are reported, aka Busy-CPU is 19.6 units and not 1916
                                    # units (for just over 19 CPUs used, but this usage could be spread out among many more actual CPUs).
                                    my %this_sample = ( 'value' => $$cpu_entry{$cpu_type} / 100, 'end' => $hms_ms + $ymd_timestamp_ms);
                                    push(@{ $sysstat_metrics[$metric_types{$this_type}{$this_name}]{'data'}}, \%this_sample);
                                }
                            }
                        }
                        $prev_hms_ms = $hms_ms;
                    }
                }
            }
        }
    }
}
closedir $dh;
if (scalar @sysstat_metrics > 0) {
    my $coder = JSON::XS->new;
    my $json_fh = new IO::Compress::Xz "metric-data.json.xz" || die("Could not open file metric-data.json.xz for writing\n");
    print $json_fh $coder->encode(\@sysstat_metrics);
    close($json_fh);
}
